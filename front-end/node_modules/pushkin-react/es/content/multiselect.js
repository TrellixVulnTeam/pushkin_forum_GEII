function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable max-len */
/* eslint-disable camelcase */

import React, { PropTypes } from 'react';

var MultiSelect = function (_React$Component) {
  _inherits(MultiSelect, _React$Component);

  function MultiSelect() {
    _classCallCheck(this, MultiSelect);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  MultiSelect.prototype.componentDidMount = function componentDidMount() {
    var props = this.props;
    var page_1_questions = [this.props.question];
    var page_1_options = this.props.choices;
    var multi_choice_block = {
      type: 'survey-multi-select',
      questions: page_1_questions,
      options: [page_1_options],
      required: [false, false],
      on_finish: function on_finish(data) {
        var response = JSON.parse(data.responses);
        var choiceIds = response.answer.map(function (answer) {
          var index = props.allChoices.findIndex(function (choice) {
            return choice.displayText === answer;
          });
          return props.allChoices[index].id;
        });
        var formatResponse = {
          questionId: props.questionId,
          user: {
            id: props.userId
          }
        };
        var answerObj = {
          questionId: props.questionId,
          questionText: props.question,
          answer: response.answer
        };
        if (choiceIds.length > 0) {
          answerObj.choiceId = choiceIds;
          formatResponse.choiceId = choiceIds;
        }
        props.nextQuestion(formatResponse, answerObj);
      }
    };
    jsPsych.init({
      display_element: this.refs.main,
      timeline: [multi_choice_block],
      on_finish: function on_finish() {
        if (props.showProgress) {
          props.dispatchPrecent(35);
        }
        props.progress();
      }
    });
  };

  MultiSelect.prototype.componentDidUpdate = function componentDidUpdate() {
    var props = this.props;
    var page_1_questions = [this.props.question];
    var page_1_options = this.props.choices;
    var multi_choice_block = {
      type: 'survey-multi-select',
      questions: page_1_questions,
      options: [page_1_options],
      required: [false, false],
      on_finish: function on_finish(data) {
        var response = JSON.parse(data.responses);
        var choiceIds = response.answer.map(function (answer) {
          var index = props.allChoices.findIndex(function (choice) {
            return choice.displayText === answer;
          });
          return props.allChoices[index].id;
        });
        var formatResponse = {
          questionId: props.questionId,
          user: {
            id: props.userId
          }
        };
        var answerObj = {
          questionId: props.questionId,
          questionText: props.question,
          answer: response.answer
        };
        if (choiceIds.length > 0) {
          answerObj.choiceId = choiceIds;
          formatResponse.choiceId = choiceIds;
        }
        props.nextQuestion(formatResponse, answerObj);
      }
    };
    jsPsych.init({
      display_element: this.refs.main,
      timeline: [multi_choice_block],
      on_finish: function on_finish() {
        if (props.showProgress) {
          props.dispatchPrecent(35);
        }
        props.progress();
      }
    });
  };

  MultiSelect.prototype.showProgress = function showProgress() {
    if (this.props.showProgress) {
      return React.createElement(Progress, { precent: this.props.precent });
    }
  };

  MultiSelect.prototype.render = function render() {
    return React.createElement(
      'div',
      null,
      React.createElement('div', { ref: 'main' }),
      this.showProgress()
    );
  };

  return MultiSelect;
}(React.Component);

export { MultiSelect as default };