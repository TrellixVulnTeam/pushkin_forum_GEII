function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable max-len */

import React, { PropTypes } from 'react';

var Instruction = function (_React$Component) {
  _inherits(Instruction, _React$Component);

  function Instruction() {
    _classCallCheck(this, Instruction);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Instruction.prototype.componentDidMount = function componentDidMount() {
    var trial = {
      type: 'instructions',
      pages: this.props.text,
      show_clickable_nav: false
    };

    jsPsych.init({
      display_element: this.refs.main,
      timeline: [trial],
      on_finish: function on_finish() {
        jsPsych.data.displayData();
      }
    });
  };

  Instruction.prototype.render = function render() {
    return React.createElement(
      'div',
      null,
      React.createElement('div', { ref: 'main' }),
      React.createElement(
        'button',
        {
          style: { marginTop: 40, width: 180 },
          className: 'btn btn-success col-xs-offset-4',
          onClick: this.props.buidInitial
        },
        'Next'
      )
    );
  };

  return Instruction;
}(React.Component);

export { Instruction as default };