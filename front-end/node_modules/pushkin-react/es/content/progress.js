function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable max-len */

import React, { PropTypes } from 'react';
import { Line, Circle } from 'rc-progress';

var Progress = function (_React$Component) {
  _inherits(Progress, _React$Component);

  function Progress() {
    _classCallCheck(this, Progress);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Progress.prototype.formatPrecent = function formatPrecent() {
    if (this.props.precent > 100) {
      return 100;
    }
    return this.props.precent.toFixed(2);
  };

  Progress.prototype.render = function render() {
    return React.createElement(
      'div',
      { style: { marginTop: 20 } },
      React.createElement(
        'label',
        { style: { 'text-align': 'center', 'margin-top': 20 } },
        ' Progress: ',
        this.formatPrecent(),
        ' % '
      ),
      React.createElement(Line, {
        percent: this.props.precent,
        strokeWidth: '4',
        strokeColor: '#68C8F5'
      })
    );
  };

  return Progress;
}(React.Component);

export { Progress as default };