'use strict';

exports.__esModule = true;
exports.default = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _progress = require('./progress');

var _progress2 = _interopRequireDefault(_progress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable max-len */
/* eslint-disable camelcase */

var MultiPicture = function (_React$Component) {
  _inherits(MultiPicture, _React$Component);

  function MultiPicture() {
    _classCallCheck(this, MultiPicture);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  MultiPicture.prototype.componentDidMount = function componentDidMount() {
    var props = this.props;
    var page_1_questions = [this.props.question];
    var page_1_options = this.props.choices;
    var multi_choice_block = {
      type: 'survey-multi-picture',
      questions: [page_1_questions],
      options: [page_1_options],
      required: false,
      horizontal: true,
      on_finish: function on_finish(data) {
        var response = JSON.parse(data.responses);
        var choiceId = void 0;
        props.choices.filter(function (currentChoice) {
          if (currentChoice.url === response.answer) {
            choiceId = currentChoice.choiceId;
          }
        });
        var formatResponse = {
          choiceId: choiceId,
          questionId: props.questionId,
          user: {
            id: props.userId
          }
        };
        var answerObj = {
          questionId: props.questionId,
          questionText: props.question,
          answer: response.answer,
          choiceId: choiceId
        };
        props.nextQuestion(formatResponse, answerObj);
      }
    };
    jsPsych.init({
      display_element: this.refs.main,
      timeline: [multi_choice_block],
      on_finish: function on_finish() {
        if (props.showProgress) {
          props.dispatchPrecent(35);
        }
        props.progress();
      }
    });
  };

  MultiPicture.prototype.componentDidUpdate = function componentDidUpdate() {
    var props = this.props;
    var page_1_questions = [this.props.question];
    var page_1_options = this.props.choices;
    var multi_choice_block = {
      type: 'survey-multi-picture',
      questions: [page_1_questions],
      options: [page_1_options],
      required: [true, false],
      horizontal: true,
      on_finish: function on_finish(data) {
        var response = JSON.parse(data.responses);
        var choiceId = void 0;
        props.choices.filter(function (currentChoice) {
          if (currentChoice.url === response.answer) {
            choiceId = currentChoice.choiceId;
          }
        });
        var formatResponse = {
          choiceId: choiceId,
          questionId: props.questionId,
          user: {
            id: props.userId
          }
        };
        var answerObj = {
          questionId: props.questionId,
          questionText: props.question,
          answer: response.answer,
          choiceId: choiceId
        };
        props.nextQuestion(formatResponse, answerObj);
      }
    };
    jsPsych.init({
      display_element: this.refs.main,
      timeline: [multi_choice_block],
      on_finish: function on_finish() {
        if (props.showProgress) {
          props.dispatchPrecent(35);
        }
        props.progress();
      }
    });
  };

  MultiPicture.prototype.showProgress = function showProgress() {
    if (this.props.showProgress) {
      return _react2.default.createElement(_progress2.default, { precent: this.props.precent });
    }
  };

  MultiPicture.prototype.render = function render() {
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement('div', { ref: 'main' }),
      this.showProgress()
    );
  };

  return MultiPicture;
}(_react2.default.Component);

exports.default = MultiPicture;
module.exports = exports['default'];