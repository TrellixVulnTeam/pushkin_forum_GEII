'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = nextQuestion;

var _questionque = require('../actions/questionque');

var _questionlist = require('../actions/questionlist');

var _fetch = require('../actions/fetch');

var _instruction = require('../actions/instruction');

function nextQuestion() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    isFetching: false,
    instruction: null,
    next: null,
    current: null,
    complete: [],
    answers: []
  };
  var action = arguments[1];

  switch (action.type) {
    case _instruction.INSTRUCTION:
      {
        return _extends({}, state, {
          instruction: action.script
        });
      }
    case _fetch.REQUEST_QUESTION_BEGIN:
      {
        return _extends({}, state, {
          isFetching: true,
          instruction: null
        });
      }
    case _questionlist.BUILD_INITIAL:
      {
        return _extends({}, state, {
          current: action.list[0],
          next: action.list[1],
          isFetching: false
        });
      }
    case _questionque.NEXT_QUESTION:
      {
        return _extends({}, state, {
          next: action.nextQuestion,
          current: state.next,
          complete: [].concat(state.complete, [state.current]),
          isFetching: false
        });
      }
    case _questionque.ANSWER_COLLECTION:
      {
        return _extends({}, state, {
          answers: [].concat(state.answers, [action.answer])
        });
      }
    default:
      return state;
  }
}
module.exports = exports['default'];