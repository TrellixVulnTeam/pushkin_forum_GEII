'use strict';

exports.__esModule = true;

var _class, _temp, _initialiseProps; /* eslint-disable max-len */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _multichoice = require('./content/multichoice');

var _multichoice2 = _interopRequireDefault(_multichoice);

var _multipicture = require('./content/multipicture');

var _multipicture2 = _interopRequireDefault(_multipicture);

var _multiselect = require('./content/multiselect');

var _multiselect2 = _interopRequireDefault(_multiselect);

var _questionlist = require('./actions/questionlist');

var _questionque = require('./actions/questionque');

var _instruction = require('./actions/instruction');

var _progress = require('./actions/progress');

var _Spinner = require('./content/Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SurveyProvider = (_temp = _class = function (_React$Component) {
  _inherits(SurveyProvider, _React$Component);

  function SurveyProvider(props) {
    _classCallCheck(this, SurveyProvider);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _initialiseProps.call(_this);

    _this.state = {};
    return _this;
  }

  SurveyProvider.prototype.componentWillMount = function componentWillMount() {
    // uncomment line 30 to save answers
    // you can find your answers saved under state.questionque -> answers
    //this.props.dispatch(saveAnswers());
    if (!this.props.questionque.current && !this.props.questionque.isFetching && this.props.userInfo.results && !this.state.finishCalled) {
      // survey is done, call 
      this.setState({ finishCalled: true });
      this.props.onFinish();
    }
    this.props.dispatch((0, _instruction.startInstruction)(this.props.instructions));
  };

  SurveyProvider.prototype.componentDidMount = function componentDidMount() {
    console.log('building initial');
    // this.buildInitial();
    this.props.dispatch((0, _questionlist.questionList)());
  };

  SurveyProvider.prototype.handlePictureChoices = function handlePictureChoices(currentQuestion) {
    if (currentQuestion.type === "survey-multi-picture") {
      return currentQuestion.choices.map(function (currentChoice) {
        return {
          url: currentChoice.imageUrl,
          label: currentChoice.displayText,
          choiceId: currentChoice.id
        };
      });
    }
    return currentQuestion.choices.map(function (currentChoice) {
      return currentChoice.displayText;
    });
  };

  SurveyProvider.prototype.render = function render() {
    if (this.props.questionque.isFetching) {
      return null;
    }
    if (this.props.questionque.isFetching && !this.props.questionque.current) {
      return _react2.default.createElement(
        'h3',
        null,
        'Loading ... '
      );
    }
    if (this.props.questionque.current) {
      var choices = this.handlePictureChoices(this.props.questionque.current);
      switch (this.props.questionque.current.type) {
        case "survey-multi-picture":
          {
            return _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(_multipicture2.default, {
                question: this.props.questionque.current.prompt,
                choices: choices,
                showProgress: false,
                dispatchPrecent: this.dispatchPrecent,
                questionId: this.props.questionque.current.choices[0].questionId,
                trialId: this.props.questionque.current.trialId,
                nextQuestion: this.fetchNextQuestion,
                progress: this.props.progress,
                userId: this.props.userInfo.id
              })
            );
          }
        case "survey-multi-choice":
          {
            return _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(_multichoice2.default, {
                question: this.props.questionque.current.prompt,
                choices: choices,
                showProgress: false,
                dispatchPrecent: this.dispatchPrecent,
                allChoices: this.props.questionque.current.choices,
                questionId: this.props.questionque.current.choices[0].questionId,
                trialId: this.props.questionque.current.trialId,
                nextQuestion: this.fetchNextQuestion,
                progress: this.props.progress,
                userId: this.props.userInfo.id
              })
            );
          }
        case "survey-multi-select":
          {
            return _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(_multiselect2.default, {
                question: this.props.questionque.current.prompt,
                choices: choices,
                showProgress: false,
                dispatchPrecent: this.dispatchPrecent,
                allChoices: this.props.questionque.current.choices,
                questionId: this.props.questionque.current.choices[0].questionId,
                trialId: this.props.questionque.current.trialId,
                nextQuestion: this.fetchNextQuestion,
                progress: this.props.progress,
                userId: this.props.userInfo.id
              })
            );
          }
        default:
          return null;
      }
    }
    if (!this.props.questionque.current && !this.props.questionque.isFetching && this.props.userInfo.results) {
      return _react2.default.createElement(
        'div',
        null,
        this.props.resultsContainer(this.props.userInfo.results)
      );
    }
    return _react2.default.createElement(
      'h1',
      null,
      'here'
    );
  };

  return SurveyProvider;
}(_react2.default.Component), _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.fetchNextQuestion = function (response, answer) {
    var props = _this2.props;
    // Disabled to allow for empty responses by users
    // if (!response.choiceId) {
    //   console.log(response, 'had no choice id');
    // } else {
    if (!response.questionId) {
      console.log(response, 'had no question id');
    } else {
      props.dispatch((0, _questionque.postAnswerGetQuestion)(response));
    }
    // }
  };

  this.dispatchPrecent = function (numberOfQuestions) {
    var precent = 100 / numberOfQuestions;
    // this.props.dispatch(startProgress((parseFloat(this.props.options.precent, 10)) + precent))
  };
}, _temp);
exports.default = (0, _reactRedux.connect)(function (state) {
  return state.pushkin;
})(SurveyProvider);
module.exports = exports['default'];